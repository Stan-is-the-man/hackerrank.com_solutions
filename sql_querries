# Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain
duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[aeiouAEIOU]'
ORDER BY CITY;

################################################################
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates

SELECT DISTINCT(CITY)
FROM STATION
WHERE CITY REGEXP '[aeiouAEIOU]$'
ORDER BY CITY;
################################################################
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last
characters. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE CITY REGEXP '[aeiouAEIOU]$'
AND CITY REGEXP '^[aeiouAEIOU]'
ORDER BY CITY;
################################################################
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE CITY NOT REGEXP '^[aeiouAEIOU]';
################################################################
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE CITY NOT REGEXP '^[aeiouAEIOU]'
AND CITY NOT REGEXP '[aeiouAEIOU]$' ;
################################################################
Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters
of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby,
etc.), secondary sort them by ascending ID.

SELECT NAME
FROM STUDENTS
WHERE Marks > 75
ORDER BY RIGHT(NAME,3), ID;
################################################################
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary
 greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

SELECT name
FROM Employee
WHERE SALARY > 2000
AND months < 10
ORDER BY employee_id;
################################################################
select sum(population)
from city
where district = 'California'
################################################################

select sum(population)
from city
where countrycode = 'JPN'
################################################################

#replace
SELECT CEIL(
AVG(Salary) - AVG(REPLACE(Salary,0, ''))
)
FROM EMPLOYEES
################################################################

We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum
total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all
employees as well as the total number of employees who have maximum total earnings. Then print these values as
space-separated integers.

SELECT (salary * months) AS Earnings, COUNT(*)
FROM Employee
GROUP BY Earnings
ORDER BY Earnings DESC
LIMIT 1;
################################################################
SELECT ROUND(MAX(LAT_N), 4)
FROM STATION
WHERE LAT_N < 137.2345;
################################################################

SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;
################################################################
SELECT ROUND(LAT_N, 4)
FROM STATION
WHERE LAT_N > 38.7780
ORDER BY LAT_N
LIMIT 1;
################################################################
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N > 38.7780
ORDER BY LAT_N
LIMIT 1;
################################################################
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT CASE
    WHEN (A=B AND B=C) THEN 'Equilateral'
    WHEN ((A=B AND A!=C) OR (A!=B AND B=C) OR (A=C AND C!=B)) AND (A+B>C AND A+C>B AND B+C>A) THEN 'Isosceles'
    WHEN (A!=B AND A!=C AND B!=C) AND (A+B>C AND A+C>B AND B+C>A) THEN 'Scalene'
    ELSE 'Not A Triangle'
    END
FROM triangles;
################################################################

Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its
 corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
Note: Print NULL when there are no more names corresponding to an occupation.

SELECT
    MAX(CASE WHEN Occupation = 'Doctor' THEN Name END) AS Doctor,
    MAX(CASE WHEN Occupation = 'Professor' THEN Name END) AS Professor,
    MAX(CASE WHEN Occupation = 'Singer' THEN Name END) AS Singer,
    MAX(CASE WHEN Occupation = 'Actor' THEN Name END) AS Actor
FROM (
    SELECT Occupation,
    Name,
    ROW_NUMBER() OVER (PARTITION BY Occupation ORDER BY Name) AS row_num
    FROM OCCUPATIONS
) t
GROUP BY row_num
ORDER BY row_num;
################################################################
SELECT SUM(CITY.POPULATION)
FROM CITY
INNER JOIN COUNTRY
ON CITY.CountryCode = COUNTRY.Code
WHERE CONTINENT = 'Asia'
################################################################

SELECT CITY.NAME
FROM CITY
INNER JOIN COUNTRY
ON CITY.CountryCode = COUNTRY.Code
WHERE CONTINENT = 'Africa'
################################################################

SELECT CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM COUNTRY
INNER JOIN CITY
ON  CITY.CountryCode = COUNTRY.Code
GROUP BY CONTINENT
################################################################




